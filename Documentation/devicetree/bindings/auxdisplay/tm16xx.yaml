# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/auxdisplay/tm16xx.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Auxiliary displays based on TM16xx and compatible LED controllers

maintainers:
  - Jean-François Lessard <jefflessard3@gmail.com>

description: |
  TM16xx controllers manage a matrix of LEDs organized in grids (rows) and segments (columns).
  Each grid or segment can be wired to drive either a digit or individual icons, depending on the
  board design.

  Typical display example:

           ---    ---       ---    ---
    WIFI  |   |  |   |  -  |   |  |   |  USB  PLAY
           ---    ---       ---    ---
    LAN   |   |  |   |  -  |   |  |   |  BT   PAUSE
           ---    ---       ---    ---
  
  The controller itself is agnostic of the display layout. The specific arrangement
  (which grids and segments drive which digits or icons) is determined by the board-level
  wiring. Therefore, these bindings describe hardware configuration at the PCB level
  to enable support of multiple display implementations using these LED controllers.

properties:
  compatible:
    enum:
      - titanmec,tm1618
      - titanmec,tm1620
      - titanmec,tm1628
      - titanmec,tm1650
      - fdhisi,fd620
      - fdhisi,fd628
      - fdhisi,fd650
      - fdhisi,fd6551
      - fdhisi,fd655
      - wxi-core,aip1628
      - princeton,pt6964
      - winrise,hbs658

  reg:
    maxItems: 1

  tm16xx,digits:
    description: |
      Array of grid (row) indexes corresponding to  specific wiring of digits in the display matrix.
      Defines which grid lines are connected to digit elements.
    $ref: /schemas/types.yaml#/definitions/uint8-array
    items:
      minimum: 0
      maximum: 7
    minItems: 1
    maxItems: 8

  tm16xx,segment-mapping:
    description: |
      Array of segment (column) indexes specifying the hardware layout mapping used for digit display.
      Each entry gives the segment index corresponding to a standard 7-segment element (a-g).
    $ref: /schemas/types.yaml#/definitions/uint8-array
    items:
      minimum: 0
      maximum: 7
    minItems: 7
    maxItems: 7

  tm16xx,transposed:
    description: |
      Optional flag indicating if grids and segments are swapped compared to standard matrix orientation.
      This accommodates devices where segments are wired to rows and grids to columns.
    $ref: /schemas/types.yaml#/definitions/flag

  "#address-cells":
    const: 2

  "#size-cells":
    const: 0

patternProperties:
  "^led@[0-7],[0-7]$":
    $ref: /schemas/leds/common.yaml#
    properties:
      reg:
        description: Grid (row) and segment (column) index in the matrix of this individual LED icon
    required:
      - reg

required:
  - compatible
  - reg
  - tm16xx,digits
  - tm16xx,segment-mapping

additionalProperties: true

examples:
  - |
    display_client: i2c {
        #address-cells = <1>;
        #size-cells = <0>;

        display@24 {
            compatible = "titanmec,tm1650";
            reg = <0x24>;
            tm16xx,digits = /bits/ 8 <0 1 2 3>;
            tm16xx,segment-mapping = /bits/ 8 <0 1 2 3 4 5 6>;

            #address-cells = <2>;
            #size-cells = <0>;

            led@4,0 {
                reg = <4 0>;
                function = "lan";
            };

            led@4,1 {
                reg = <4 1>;
                function = "wlan";
            };
        };
    };
  - |
    display_client: spi {
        #address-cells = <1>;
        #size-cells = <0>;

        display@0 {
            compatible = "titanmec,tm1628";
            reg = <0>;
            tm16xx,transposed;
            tm16xx,digits = /bits/ 8 <1 2 3 4>;
            tm16xx,segment-mapping = /bits/ 8 <0 1 2 3 4 5 6>;

            #address-cells = <2>;
            #size-cells = <0>;

            led@0,2 {
                reg = <0 2>;
                function = "usb";
            };

            led@0,3 {
                reg = <0 3>;
                function = "power";
            };
        };
    };
